generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  senha     String
  superuser Boolean
  Avaliador Avaliador?

  @@map("usuarios")
}

model Edicao {
  ano              String           @id
  titulo           String
  Artigos          Artigo[]
  Avaliacoes       Avaliacao[]
  Perguntas        Pergunta[]
  AvaliadorEdicoes AvaliadorEdicao[]

  @@map("edicoes")
}

model AreaConhecimento {
  id            Int             @id @default(autoincrement())
  nome          String
  Artigos       Artigo[]
  Perguntas     Pergunta[]
  AvaliadorAreas AvaliadorArea[]

  @@map("areas_conhecimento")
}

model Artigo {
  id             Int              @id @default(autoincrement())
  titulo         String
  autores        String
  resumo         String
  linkPdf        String
  idArea         Int
  idEdicao       String
  area           AreaConhecimento @relation(fields: [idArea], references: [id])
  edicao         Edicao           @relation(fields: [idEdicao], references: [ano])
  Avaliacoes     Avaliacao[]

  @@map("artigos")
}

model Avaliador {
  id               Int              @id @default(autoincrement())
  idUsuario        Int              @unique
  nome             String
  usuario          Usuario          @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
  AvaliadorAreas   AvaliadorArea[]
  Avaliacoes       Avaliacao[]
  AvaliadorEdicoes AvaliadorEdicao[]

  @@map("avaliadores")
}

model AvaliadorEdicao {
  id          Int       @id @default(autoincrement())
  idAvaliador Int
  idEdicao    String
  avaliador   Avaliador @relation(fields: [idAvaliador], references: [id], onDelete: Cascade)
  edicao      Edicao    @relation(fields: [idEdicao], references: [ano], onDelete: Cascade)

  @@map("avaliador_edicoes")
  @@unique([idAvaliador, idEdicao])
}

model AvaliadorArea {
  id          Int             @id @default(autoincrement())
  idAvaliador Int
  idArea      Int
  avaliador   Avaliador        @relation(fields: [idAvaliador], references: [id], onDelete: Cascade)
  area        AreaConhecimento @relation(fields: [idArea], references: [id])

  @@map("avaliador_areas")
}

model Avaliacao {
  id          Int       @id @default(autoincrement())
  notaFinal   Decimal   @default(0.0)
  idAvaliador Int
  idArtigo    Int
  idEdicao    String
  avaliador   Avaliador @relation(fields: [idAvaliador], references: [id])
  artigo      Artigo    @relation(fields: [idArtigo], references: [id])
  edicao      Edicao    @relation(fields: [idEdicao], references: [ano])
  respostas   Resposta[]

  @@map("avaliacoes")
}

model Pergunta {
  id          Int             @id @default(autoincrement())
  texto       String
  idArea      Int
  idEdicao    String
  area        AreaConhecimento @relation(fields: [idArea], references: [id])
  edicao      Edicao           @relation(fields: [idEdicao], references: [ano])
  respostas   Resposta[]

  @@map("perguntas")
}

model Resposta {
  id          Int       @id @default(autoincrement())
  idAvaliacao Int
  idPergunta  Int
  nota        Decimal    @default(0.0)
  avaliacao   Avaliacao  @relation(fields: [idAvaliacao], references: [id])
  pergunta    Pergunta   @relation(fields: [idPergunta], references: [id])

  @@map("respostas")
}
